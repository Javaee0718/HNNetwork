package com.womow.henan.modules.province.service.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.io.FilenameUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.womow.henan.commons.utils.BaseDataUtils;
import com.womow.henan.commons.utils.PoiUtils;
import com.womow.henan.modules.province.bean.dto.BusPrecisionEntityDo;
import com.womow.henan.modules.province.bean.po.BusPrecisionQuestionEntity;
import com.womow.henan.modules.province.dao.BusPrecisionDao;
import com.womow.henan.modules.province.dao.BusPresQuestionDao;
import com.womow.henan.modules.province.service.BusPrecisionService;

@Service
@Transactional
public class BusPrecisionServiceImpl implements BusPrecisionService {

	private Logger logger = LoggerFactory.getLogger(BusPrecisionService.class);

	@Autowired
	private BusPrecisionDao busPrecisionDao;
	@Autowired
	private BusPresQuestionDao busPresQuestionDao;

	public String precisionFileUpload(MultipartFile file) throws Exception {

		int cellNum = 0;
		String returnMessage = "";
		try {
			String fileName = file.getOriginalFilename();
			String fileExtension = FilenameUtils.getExtension(fileName);
			Workbook workbook;
			if (fileExtension.equals("xls")) {
				workbook = new HSSFWorkbook(file.getInputStream());
			} else {
				workbook = new XSSFWorkbook(file.getInputStream());
			}
			Sheet sheet = null;
			if ((sheet = workbook.getSheet(BaseDataUtils.getValue("zkzyxtfwgfl"))) != null) {
				returnMessage = "指标 " + sheet.getSheetName() + ": " + zkzyxtfwgflQuota(sheet);
			}
			if ((sheet = workbook.getSheet(BaseDataUtils.getValue("yzfwpjzs"))) != null) {
				if (!returnMessage.equals("")) {
					returnMessage = returnMessage + "\n" + "指标 " + sheet.getSheetName() + ": " + yzfwpjzsQuota(sheet);
				} else {
					returnMessage = "指标 " + sheet.getSheetName() + ": " + yzfwpjzsQuota(sheet);
				}
			}
			if ((sheet = workbook.getSheet(BaseDataUtils.getValue("yxfwgfl"))) != null) {
				if (!returnMessage.equals("")) {
					returnMessage = returnMessage + "\n" + "指标 " + sheet.getSheetName() + ": " + yxfwgflQuota(sheet);
				} else {
					returnMessage = "指标 " + sheet.getSheetName() + ": " + yxfwgflQuota(sheet);
				}
			}
		} catch (Exception e) {

		}
		return returnMessage;
	}

	public String precisionQuestionImp(Sheet sheet, int year, int month, String quotaName) throws Exception {
		String message = "";
		int cellNum = 0;
		try {
			// 导入指标相关意见数据
			int lastRowNum = sheet.getLastRowNum();
			BusPrecisionQuestionEntity preQuest = new BusPrecisionQuestionEntity();
			preQuest.setYear(year);
			preQuest.setMonth(month);
			preQuest.setQuotaName(quotaName);
			if (lastRowNum > 4) {
				short lastCellNum = sheet.getRow(4).getLastCellNum();
				List<Cell> list = new ArrayList<>();
				for (int i = 5; i <= lastRowNum; i++) {
					Row nextRow = sheet.getRow(i);
					for (int j = 0; j < lastCellNum; j++) {
						list.add(nextRow.getCell(j));
					}
					List<String> dataList = PoiUtils.getCellValue(list);
					cellNum = i + 1;
					list.clear();
					preQuest.setMonitorDate(dataList.get(0));
					preQuest.setQuestionType(dataList.get(1));
					preQuest.setDutyUnit(dataList.get(2));
					preQuest.setQuestionReason(dataList.get(3));
					preQuest.setCureOpinion(dataList.get(4));
					preQuest.setCureTerm(dataList.get(5));
					preQuest.setCureResult(dataList.get(6));
					busPresQuestionDao.save(preQuest);
				}
			}
		} catch (Exception e) {
			message = quotaName + ":第" + cellNum + "列数据有问题";
			logger.warn(BaseDataUtils.dateToString(new Date()) + "BusPrecisionServiceImpl.precisionQuestionImp()异常 " + e
					+ " " + message);
			return message;
		}
		return message;
	}

	/**
	 * 营销服务规范率
	 * 
	 * @param sheet
	 * @return
	 */
	private String yxfwgflQuota(Sheet sheet) {
		String message = "";
		String quotaName = sheet.getSheetName();
		int rowNum = 0;
		int cellNum = 0;
		try {
			int year = 0;
			int month = 0;
			try {
				Row row = sheet.getRow(0);
				Cell yearCell = row.getCell(0);
				yearCell.setCellType(Cell.CELL_TYPE_NUMERIC);
				year = (int) yearCell.getNumericCellValue();
				Cell monthCell = row.getCell(1);
				monthCell.setCellType(Cell.CELL_TYPE_NUMERIC);
				month = (int) monthCell.getNumericCellValue();
			} catch (Exception e) {
				message = "请输入正确的年与月";
				logger.warn(BaseDataUtils.dateToString(new Date()) + " BusPrecisionServiceImpl.yxfwgflQuota()方法异常" + " "
						+ message);
				return message;
			}
			List<Cell> list = new ArrayList<>();
			// 导入精益化指标数据
			List<BusPrecisionEntityDo> doList = new ArrayList<>();
			for (int i = 0; i < 8; i++) {
				BusPrecisionEntityDo precision = new BusPrecisionEntityDo();
				precision.setYear(year);
				precision.setMonth(month);
				precision.setQuotaName(quotaName);
				precision.setHeadDept(BaseDataUtils.getValue("yingxiaobu"));
				list.add(sheet.getRow(1).getCell(i));
				list.add(sheet.getRow(2).getCell(i));
				list.add(sheet.getRow(3).getCell(i));
				List<String> dataList = PoiUtils.getCellValue(list);
				list.clear();
				precision.setNotEndQuotaName(dataList.get(0));
				precision.setEndQuotaName(dataList.get(1));
				precision.setEndQuotaValue(dataList.get(2));
				doList.add(precision);
			}
			// 运算规则
			// "计算公式：营销服务规范率=0.7×[1-一类服务不规范投诉数/(人工话务量/100×50%+当期营业户数/1000×50%)]+0.2×[1-二类服务不规范投诉数/(人工话务量/100×50%+当期营业户数/1000×50%)]+0.1×[1-服务不规范举报数/(人工话务量/100×50%+当期营业户数/1000×50%)]
			// 其中：
			// 1.每发生一起报告及报表类等信息报送不及时或报送质量不合格的，扣减总指标0.2个百分点。
			// 2.被国网营销部督办的事项，每件扣减总指标0.5个百分点。
			// 3.服务不规范投诉数包含投诉和其他业务分类中应派为投诉的服务不规范工单数，其中：
			// （1）一类服务不规范投诉包括5项三级投诉：营业厅服务，收费标准，收费项目，业扩报装超时限，抄表。
			// （2）二类服务不规范投诉包括19项三级投诉：营业厅、计量、用电检查、勘测、抄催人员服务态度和服务规范，电费，电价，环节处理不当，业务办理超时限，环节处理问题，计量装置，表计线路接错，验表，轮换户表改造。
			// （3）服务不规范举报包括4个二级举报：以电谋私，服务行为，里勾外联，三指定。
			// （4）催缴费，欠费停复电2项不纳入指标考核。
			// （5）其他由于公司新业务推广引发的投诉原则上不纳入指标考核。
			// 4.每发现一起违约用电和窃电举报处理不规范（通过举报工单答复质量、与营销系统内处理传票信息比对获取），扣减总指标0.1个百分点。

			/*------------------------------------------*/
			// 人工话务量
			BusPrecisionEntityDo do1 = doList.get(1);
			String do12 = do1.getEndQuotaValue();
			// 当期营业户数
			BusPrecisionEntityDo do2 = doList.get(2);
			String do22 = do2.getEndQuotaValue();

			// 人工话务量/100×50%+当期营业户数/1000×50%
			BigDecimal do12BD = new BigDecimal(do12);
			BigDecimal do22BD = new BigDecimal(do22);
			BigDecimal cm1 = do12BD.divide(new BigDecimal("100")).multiply(new BigDecimal("50"));
			BigDecimal cm2 = do22BD.divide(new BigDecimal("1000")).multiply(new BigDecimal("50"));
			BigDecimal cmV = new BigDecimal("1");
			// 共用值
			BigDecimal cm = cm1.add(cm2);
			if (cm.doubleValue() != 0) {
				BusPrecisionEntityDo do0 = doList.get(0);
				String do02 = do0.getEndQuotaValue();
				BigDecimal do02BD = new BigDecimal(do02);
				BigDecimal cmV1 = new BigDecimal("0.7");
				// 值1
				BigDecimal rt1 = cmV1.multiply(cmV.subtract(do02BD.divide(cm,4,BigDecimal.ROUND_HALF_UP)));

				BusPrecisionEntityDo do3 = doList.get(3);
				String do32 = do3.getEndQuotaValue();
				BigDecimal do32BD = new BigDecimal(do32);
				BigDecimal cmV2 = new BigDecimal("0.2");
				// 值2
				BigDecimal rt2 = cmV2.multiply(cmV.subtract(do32BD.divide(cm,4,BigDecimal.ROUND_HALF_UP)));

				BusPrecisionEntityDo do4 = doList.get(4);
				String do42 = do4.getEndQuotaValue();
				BigDecimal do42BD = new BigDecimal(do42);
				BigDecimal cmV3 = new BigDecimal("0.1");
				// 值3
				BigDecimal rt3 = cmV3.multiply(cmV.subtract(do42BD.divide(cm,4,BigDecimal.ROUND_HALF_UP)));

				// 总值
				BigDecimal fullMarkBD = rt1.add(rt2).add(rt3);
				if (fullMarkBD.doubleValue() > 0) {
					/*---------------------------------*/
					BusPrecisionEntityDo do5 = doList.get(5);
					String do52 = do5.getEndQuotaValue();
					if (do52 != null && !"".equals(do52)) {
						BigDecimal do52BD = new BigDecimal(do52);
						fullMarkBD = fullMarkBD.subtract(do52BD.multiply(new BigDecimal("0.2")));
					}
					if (fullMarkBD.doubleValue() > 0) {
						BusPrecisionEntityDo do6 = doList.get(6);
						String do62 = do6.getEndQuotaValue();
						if (do62 != null && !"".equals(do62)) {
							BigDecimal do62BD = new BigDecimal(do62);
							fullMarkBD = fullMarkBD.subtract(do62BD.multiply(new BigDecimal("0.5")));
						}
						if (fullMarkBD.doubleValue() > 0) {
							BusPrecisionEntityDo do7 = doList.get(7);
							String do72 = do6.getEndQuotaValue();
							if (do72 != null && !"".equals(do72)) {
								BigDecimal do72BD = new BigDecimal(do72);
								fullMarkBD = fullMarkBD.subtract(do72BD.multiply(new BigDecimal("0.1")));
							}
						}
					}
				}
				double fullMark = fullMarkBD.doubleValue();
				if (fullMark<0) {
					fullMark = 0;
				}
				BusPrecisionEntityDo do5 = doList.get(5);
				BusPrecisionEntityDo do6 = doList.get(6);
				BusPrecisionEntityDo do7 = doList.get(7);
				do0.setQuotaValue(fullMark);
				cellNum = 1;
				busPrecisionDao.save(do0);
				do1.setQuotaValue(fullMark);
				do1.setNotEndQuotaName(do0.getNotEndQuotaName());
				cellNum = 2;
				busPrecisionDao.save(do1);
				do2.setQuotaValue(fullMark);
				do2.setNotEndQuotaName(do0.getNotEndQuotaName());
				cellNum = 3;
				busPrecisionDao.save(do2);
				do3.setQuotaValue(fullMark);
				do3.setNotEndQuotaName(do0.getNotEndQuotaName());
				cellNum = 4;
				busPrecisionDao.save(do3);
				do4.setQuotaValue(fullMark);
				do4.setNotEndQuotaName(do0.getNotEndQuotaName());
				cellNum = 5;
				busPrecisionDao.save(do4);
				do5.setQuotaValue(fullMark);
				cellNum = 6;
				busPrecisionDao.save(do5);
				do6.setQuotaValue(fullMark);
				do6.setNotEndQuotaName(do0.getNotEndQuotaName());
				cellNum = 7;
				busPrecisionDao.save(do6);
				do7.setQuotaValue(fullMark);
				do7.setNotEndQuotaName(do0.getNotEndQuotaName());
				cellNum = 8;
				busPrecisionDao.save(do7);
			}
			// TODO 允许值为空嘛?
			message = precisionQuestionImp(sheet, year, month, quotaName);
			if (!message.equals("")) {
				return message;
			}
			message = "导入成功";
		} catch (Exception e) {
			message = quotaName + ":第" + cellNum + "列数据有问题";
			logger.warn(BaseDataUtils.dateToString(new Date()) + "BusPrecisionServiceImpl.yxfwgflQuota()异常 " + e + " "
					+ message);
			return message;
		}
		return message;
	}

	/**
	 * 优质服务评价指数
	 * 
	 * @param sheet
	 * @return
	 */
	private String yzfwpjzsQuota(Sheet sheet) {
		String message = "";
		int rowNum = 0;
		int cellNum = 0;
		try {
			int year = 0;
			int month = 0;
			try {
				Row row = sheet.getRow(0);
				Cell yearCell = row.getCell(0);
				yearCell.setCellType(Cell.CELL_TYPE_NUMERIC);
				year = (int) yearCell.getNumericCellValue();
				Cell monthCell = row.getCell(1);
				monthCell.setCellType(Cell.CELL_TYPE_NUMERIC);
				month = (int) monthCell.getNumericCellValue();
			} catch (Exception e) {
				message = "请输入正确的年与月";
				logger.warn(BaseDataUtils.dateToString(new Date()) + " BusPrecisionServiceImpl.zkzyxtfwgflQuota()方法异常"
						+ " " + message);
				return message;
			}

			String quotaName = sheet.getSheetName();
			List<Cell> list = new ArrayList<>();
			// 导入精益化指标数据
			List<BusPrecisionEntityDo> doList = new ArrayList<>();
			for (int i = 0; i < 6; i++) {
				BusPrecisionEntityDo precision = new BusPrecisionEntityDo();
				precision.setYear(year);
				precision.setMonth(month);
				precision.setQuotaName(quotaName);
				precision.setHeadDept(BaseDataUtils.getValue("yingxiaobu"));
				list.add(sheet.getRow(1).getCell(i));
				list.add(sheet.getRow(2).getCell(i));
				list.add(sheet.getRow(3).getCell(i));
				List<String> dataList = PoiUtils.getCellValue(list);
				list.clear();
				precision.setNotEndQuotaName(dataList.get(0));
				precision.setEndQuotaName(dataList.get(1));
				precision.setEndQuotaValue(dataList.get(2));
				doList.add(precision);
			}
			// 值运算规则如下
			// 计算公式：优质服务评价指数=（1-客户对同一事件重复致电三次及以上的事件数/业务处理量）×100%其中：1.经国网认定为恶意诉求的事件除外。
			// 2.业务处理回访满意率低于到95%的，每减少0.1%扣减总指标0.1个百分点。
			// 3.经查95598工单办理不真实，每发现一起扣减总指标0.1个百分点，扣完为止。
			// 4.每发生一起供电企业责任的负面服务类舆情，扣减总指标5个百分点，扣完为止。
			// 5.国网组织的服务检查中，每发现一起查证属实的投诉举报弄虚作假、业扩报装“三指定”、乱收费、吃拿卡要、屏蔽、旁路95598、营业场所无人值班等事件，扣减总指标0.2个百分点，扣完为止。
			// 6.业务处理量指除故障报修、表扬和国网客服中心一次答复办结咨询以外的业务量。
			BusPrecisionEntityDo do0 = doList.get(0);
			BusPrecisionEntityDo do1 = doList.get(1);
			cellNum = 1;
			BigDecimal b02 = new BigDecimal(do0.getEndQuotaValue());
			cellNum = 2;
			BigDecimal b12 = new BigDecimal(do1.getEndQuotaValue());
			BigDecimal b012 = b02.divide(b12,4,BigDecimal.ROUND_HALF_UP);
			BigDecimal fullMarkBD = new BigDecimal("1");
			fullMarkBD = fullMarkBD.subtract(b012).multiply(new BigDecimal("100"));

			cellNum = 3;
			BusPrecisionEntityDo do2 = doList.get(2);
			String endQuotaValue = do2.getEndQuotaValue();
			if (endQuotaValue != null && !endQuotaValue.equals("")) {
				BigDecimal nfBD = new BigDecimal("95");
				BigDecimal endQuotaValueBD = new BigDecimal(endQuotaValue);
				BigDecimal subtract = nfBD.subtract(endQuotaValueBD);
				if (subtract.doubleValue() > 0) {
					fullMarkBD = fullMarkBD.subtract(subtract);
				}
			}

			cellNum = 4;
			BusPrecisionEntityDo do3 = doList.get(3);
			String endQuotaValue3 = do3.getEndQuotaValue();
			if (endQuotaValue3 != null && !endQuotaValue3.equals("") && !endQuotaValue3.equals("0")) {
				BigDecimal endQuotaValue3BD = new BigDecimal(endQuotaValue3);
				BigDecimal multiply = endQuotaValue3BD.multiply(new BigDecimal("0.1"));
				fullMarkBD = fullMarkBD.subtract(multiply);
			}

			cellNum = 5;
			BusPrecisionEntityDo do4 = doList.get(4);
			String endQuotaValue4 = do4.getEndQuotaValue();
			if (endQuotaValue4 != null && !endQuotaValue4.equals("") && !endQuotaValue4.equals("0")) {
				BigDecimal endQuotaValue3BD = new BigDecimal(endQuotaValue3);
				BigDecimal multiply = endQuotaValue3BD.multiply(new BigDecimal("5"));
				fullMarkBD = fullMarkBD.subtract(multiply);
			}

			cellNum = 6;
			BusPrecisionEntityDo do5 = doList.get(5);
			String endQuotaValue5 = do5.getEndQuotaValue();
			if (endQuotaValue5 != null && !endQuotaValue5.equals("") && !endQuotaValue5.equals("0")) {
				BigDecimal endQuotaValue3BD = new BigDecimal(endQuotaValue3);
				BigDecimal multiply = endQuotaValue3BD.multiply(new BigDecimal("0.2"));
				fullMarkBD = fullMarkBD.subtract(multiply);
			}
			double fullMark = fullMarkBD.doubleValue();
			if (fullMark < 0) {
				fullMark = 0;
			}
			cellNum = 1;
			do0.setQuotaValue(fullMark);
			busPrecisionDao.save(do0);
			cellNum = 2;
			do1.setQuotaValue(fullMark);
			do1.setNotEndQuotaName(do0.getNotEndQuotaName());
			busPrecisionDao.save(do1);
			cellNum = 3;
			do2.setQuotaValue(fullMark);
			busPrecisionDao.save(do2);
			cellNum = 4;
			do3.setQuotaValue(fullMark);
			do3.setNotEndQuotaName(do2.getNotEndQuotaName());
			busPrecisionDao.save(do3);
			cellNum = 5;
			do4.setQuotaValue(fullMark);
			do4.setNotEndQuotaName(do2.getNotEndQuotaName());
			busPrecisionDao.save(do4);
			cellNum = 6;
			do5.setQuotaValue(fullMark);
			do5.setNotEndQuotaName(do2.getNotEndQuotaName());
			busPrecisionDao.save(do5);
			list.clear();
			// 导入指标相关意见数据
			message = precisionQuestionImp(sheet, year, month, quotaName);
			if (!message.equals("")) {
				return message;
			}
			message = "导入成功";
		} catch (Exception e) {
			logger.warn(BaseDataUtils.dateToString(new Date()) + " BusPrecisionServiceImpl.yzfwpjzsQuota()异常 " + e);
			message = "第" + cellNum + "列数据异常";
		}
		return message;
	}

	/**
	 * 业扩报装服务规范率指标导入
	 * 
	 * @param sheet
	 * @return
	 * @throws Exception
	 */
	private String zkzyxtfwgflQuota(Sheet sheet) throws Exception {

		String message = "";
		int cellNum = 0;
		try {
			int year = 0;
			int month = 0;
			try {
				Row row = sheet.getRow(0);
				Cell yearCell = row.getCell(0);
				yearCell.setCellType(Cell.CELL_TYPE_NUMERIC);
				year = (int) yearCell.getNumericCellValue();
				Cell monthCell = row.getCell(1);
				monthCell.setCellType(Cell.CELL_TYPE_NUMERIC);
				month = (int) monthCell.getNumericCellValue();
			} catch (Exception e) {
				message = "请输入正确的年与月";
				logger.warn(BaseDataUtils.dateToString(new Date()) + " BusPrecisionServiceImpl.zkzyxtfwgflQuota()方法异常"
						+ " " + message);
				return message;
			}

			String quotaName = sheet.getSheetName();
			List<Cell> list = new ArrayList<>();
			// 导入精益化指标数据
			List<BusPrecisionEntityDo> doList = new ArrayList<>();
			for (int i = 0; i < 6; i++) {
				BusPrecisionEntityDo precision = new BusPrecisionEntityDo();
				precision.setYear(year);
				precision.setMonth(month);
				precision.setQuotaName(quotaName);
				precision.setHeadDept(BaseDataUtils.getValue("yingxiaobu"));
				list.add(sheet.getRow(1).getCell(i));
				list.add(sheet.getRow(2).getCell(i));
				list.add(sheet.getRow(3).getCell(i));
				List<String> dataList = PoiUtils.getCellValue(list);
				list.clear();
				precision.setNotEndQuotaName(dataList.get(0));
				precision.setEndQuotaName(dataList.get(1));
				precision.setEndQuotaValue(dataList.get(2));
				doList.add(precision);
			}
			// 对数据进行遍历,运算值
			// 运算公式如下
			// 业扩报装服务规范率=0.4×业扩专业协同服务规范率+0.3×业扩服务时限达标率+0.3×客户服务满意率。
			// 业扩专业协同服务规范率=各协同环节未超时限的已归档业扩流程数/已归档的业扩流程总数×100%
			// 业扩服务时限达标率=业务办理时限达标的已归档业扩新装、增容流程数/已归档的业扩新装、增容流程数总和×100%
			// 客户服务满意率=客户评价满意的已归档业扩新装、增容流程数/已归档的业扩新装、增容流程总数×100%
			/* -------------- */
			BusPrecisionEntityDo da0 = doList.get(0);
			BusPrecisionEntityDo da1 = doList.get(1);
			da1.setNotEndQuotaName(da0.getNotEndQuotaName());
			BigDecimal da02 = new BigDecimal(da0.getEndQuotaValue());
			BigDecimal da12 = new BigDecimal(da1.getEndQuotaValue());
			double notV1 = da02.divide(da12,4,BigDecimal.ROUND_HALF_UP).doubleValue() * 100;
			da0.setNotEndQuotaValue(notV1);
			da1.setNotEndQuotaValue(notV1);
			/* -------------- */
			BusPrecisionEntityDo da2 = doList.get(2);
			BusPrecisionEntityDo da3 = doList.get(3);
			da3.setNotEndQuotaName(da2.getNotEndQuotaName());
			BigDecimal da22 = new BigDecimal(da2.getEndQuotaValue());
			BigDecimal da32 = new BigDecimal(da3.getEndQuotaValue());
			double notV2 = da22.divide(da32,4,BigDecimal.ROUND_HALF_UP).doubleValue() * 100;
			da2.setNotEndQuotaValue(notV2);
			da3.setNotEndQuotaValue(notV2);
			/* -------------- */
			BusPrecisionEntityDo da4 = doList.get(4);
			BusPrecisionEntityDo da5 = doList.get(5);
			da5.setNotEndQuotaName(da4.getNotEndQuotaName());
			BigDecimal da42 = new BigDecimal(da4.getEndQuotaValue());
			BigDecimal da52 = new BigDecimal(da5.getEndQuotaValue());
			double notV3 = da42.divide(da52,4,BigDecimal.ROUND_HALF_UP).doubleValue() * 100;
			da4.setNotEndQuotaValue(notV3);
			da5.setNotEndQuotaValue(notV3);
			BigDecimal d1 = new BigDecimal(String.valueOf(notV1));
			BigDecimal d2 = new BigDecimal(String.valueOf(notV2));
			BigDecimal d3 = new BigDecimal(String.valueOf(notV3));
			BigDecimal d11 = d1.multiply(new BigDecimal("0.4"));
			BigDecimal d21 = d2.multiply(new BigDecimal("0.3"));
			BigDecimal d31 = d3.multiply(new BigDecimal("0.3"));
			// 指标值
			double quotaValue = d11.add(d21).add(d31).doubleValue();
			da0.setQuotaValue(quotaValue);
			da1.setQuotaValue(quotaValue);
			da2.setQuotaValue(quotaValue);
			da3.setQuotaValue(quotaValue);
			da4.setQuotaValue(quotaValue);
			da5.setQuotaValue(quotaValue);
			cellNum = 1;
			// TODO _可以再次进行值的运算,保存进数据库.
			busPrecisionDao.save(da0);
			cellNum = 2;
			busPrecisionDao.save(da1);
			cellNum = 3;
			busPrecisionDao.save(da2);
			cellNum = 4;
			busPrecisionDao.save(da3);
			cellNum = 5;
			busPrecisionDao.save(da4);
			cellNum = 6;
			busPrecisionDao.save(da5);
			list.clear();
			// 导入指标相关意见数据
			message = precisionQuestionImp(sheet, year, month, quotaName);
			if (!message.equals("")) {
				return message;
			}
			message = "导入成功";
		} catch (Exception e) {
			message = "文档数据第" + cellNum + "行有异常";
			logger.warn(BaseDataUtils.dateToString(new Date()) + " BusPrecisionServiceImpl.zkzyxtfwgflQuota()方法异常" + e);
		}
		return message;
	}
}
